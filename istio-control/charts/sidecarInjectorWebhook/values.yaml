# Each injector defines the environment for the injected pods.
# Similarly, kube-inject and CNI will use a specific config template to select
# an environment for the pods.

# The main components of an environment:
# - location of discovery, telemetry, flags used in injecting the pod
# - the discovery environment will also have specific settings

# For example you can have an injector named 'dev-debug' enabling core dump,
# verbose logging and using master version of pilot and telemetry and
# a 'prod' environment using latest stable version of pilot and telemetry
# with minimal logging.

global:
  # Namespace running the control plane.
  # It is possible to use multiple Pilot instanes, for example a production
  # and canary running a new version of Istio or having canary-oriented configs (
  # more debug, etc ). For each control plane variant you need to create a matching
  # injection environment.
  istioNamespace: istio-pilot11

  # Telemetry namespace, including zipkin.
  # This is used if tracer=zipkin.
  telemetryNamespace: istio-telemetry

  hub: gcr.io/istio-release
  #tag: master-latest-daily
  #tag: release-1.0-latest-daily
  tag: release-1.1-latest-daily

  # imagePullPolicy .
  imagePullPolicy: Always

  # TODO: move to injector-specific section
  proxy_init:
    # Base name for the proxy_init container, used to configure iptables.
    # Note that it is different from istio1.0, where an alpine-based image was used.
    # Using the same image as the sidecar increases the init time ( larger download )
    # but reduces the startup time of the sidecar (image already fetched ) and the
    # chance the app will run without a proper sidecar.
    image: proxyv2

  # TODO: move to injector-specific section
  proxy:
    # Can be overriten by sidecar.istio.io/includeOutboundIPRanges
    # Controls egress ranges to intercept, could be set to the cluster CIDR to
    # only capture traffic to services.
    includeIPRanges: "*"

    #excludeIPRanges: ""

    privileged: true

    # Enable core dump, also makes the root filesystem writeable
    enableCoreDump: true

    # Docker image to use. Can be HUB/IMAGE:TAG
    image: proxyv2

    # If set to zipkin, will use 'global.tracing.zipkin.address'
    # None will disable tracing
    tracer: zipkin

    # Default port for Pilot agent health checks. A value of 0 will disable
    # health checking for sidecar.
    statusPort: 15020

    # The initial delay for readiness probes in seconds.
    readinessInitialDelaySeconds: 1

    # The period between readiness probes.
    readinessPeriodSeconds: 2

    # The number of successive failed probes before indicating readiness failure.
    readinessFailureThreshold: 30

    # DNS domain suffix for pilot proxy agent. Default value is "${POD_NAMESPACE}.svc.cluster.local".
    proxyDomain: ""

    # DNS domain suffix for pilot proxy discovery. Default value is "cluster.local".
    discoveryDomain: ""

    # Resources for the sidecar.
    resources:
      requests:
        cpu: 10m
      #  memory: 128Mi
      # limits:
      #   cpu: 100m
      #   memory: 128Mi

  sds:
    enabled: false

  tracer:
    # Configuration for envoy to send trace data to LightStep.
    # Disabled by default.
    # address: the <host>:<port> of the satellite pool
    # accessToken: required for sending data to the pool
    # secure: specifies whether data should be sent with TLS
    # cacertPath: the path to the file containing the cacert to use when verifying TLS. If secure is true, this is
    #   required. If a value is specified then a secret called "lightstep.cacert" must be created in the destination
    #   namespace with the key matching the base of the provided cacertPath and the value being the cacert itself.
    #
    lightstep:
      address: ""                # example: lightstep-satellite:443
      accessToken: ""            # example: abcdefg1234567
      secure: true               # example: true|false
      cacertPath: ""             # example: /etc/lightstep/cacert.pem
    zipkin:

      address: ""

  arch:
    amd64: 2
    s390x: 2
    ppc64le: 2


## Requires citadel istio-sidecar-injector-service-account.istio-env11:istio-sidecar-injector.istio-env11.svc

# sidecar-injector webhook configuration.
# If down, new pods will fail to start or restart for a short time, but they will
# retry.
replicaCount: 1

# This enables injection of sidecar in all namespaces,
# with the exception of namespaces with "istio-injection:disabled" annotation
# Only one environment should have this enabled.
enableNamespacesByDefault: false

# If set, no iptable init will be added. It assumes CNI is installed.
# TODO: rename to 'enableIptables' or add 'interceptionMode: CNI'
istio_cni:
  enabled: false

# Debug level for envoy and pilot-agent. Can be set to 'debug' for very verbose
# messages.
debug: info

# Mesh config values affecting injection. See the api - this is just the subset
# needed for injection.
mesh:

  # TCP connection timeout when connecting to pilot
  connectTimeout: 10s

  # These settings that determine how long an old Envoy
  # process should be kept alive after an occasional reload.
  drainDuration: 45s
  parentShutdownDuration: 1m0s

  #
  # Set concurrency to a specific number to control the number of Proxy worker threads.
  # If not set (default), then start worker thread for each CPU thread/core.
  #concurrency:

  interceptionMode: REDIRECT


